# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List
from typing import Optional, Set
from typing_extensions import Self

class ScrapeResult(BaseModel):
    """
    ScrapeResult
    """ # noqa: E501
    requested_url: StrictStr
    url: StrictStr
    title: StrictStr
    short_title: StrictStr
    author: StrictStr
    html: StrictStr
    markdown: StrictStr
    summary_html: StrictStr
    summary_md: StrictStr
    links: List[StrictStr]
    internal_links: List[StrictStr]
    pagination_links: List[StrictStr]
    __properties: ClassVar[List[str]] = ["requested_url", "url", "title", "short_title", "author", "html", "markdown", "summary_html", "summary_md", "links", "internal_links", "pagination_links"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScrapeResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScrapeResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "requested_url": obj.get("requested_url"),
            "url": obj.get("url"),
            "title": obj.get("title"),
            "short_title": obj.get("short_title"),
            "author": obj.get("author"),
            "html": obj.get("html"),
            "markdown": obj.get("markdown"),
            "summary_html": obj.get("summary_html"),
            "summary_md": obj.get("summary_md"),
            "links": obj.get("links"),
            "internal_links": obj.get("internal_links"),
            "pagination_links": obj.get("pagination_links")
        })
        return _obj


