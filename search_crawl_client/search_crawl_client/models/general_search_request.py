# coding: utf-8

"""
    FastAPI

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from search_crawl_client.models.cache_config import CacheConfig
from typing import Optional, Set
from typing_extensions import Self

class GeneralSearchRequest(BaseModel):
    """
    GeneralSearchRequest
    """ # noqa: E501
    q: StrictStr
    language: Optional[StrictStr] = 'en'
    page: Optional[StrictInt] = 1
    time_range: Optional[StrictStr] = None
    format: Optional[StrictStr] = 'json'
    cache_config: Optional[CacheConfig] = None
    engines: Optional[List[StrictStr]] = None
    __properties: ClassVar[List[str]] = ["q", "language", "page", "time_range", "format", "cache_config", "engines"]

    @field_validator('time_range')
    def time_range_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['day', 'month', 'year']):
            raise ValueError("must be one of enum values ('day', 'month', 'year')")
        return value

    @field_validator('format')
    def format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['json', 'csv', 'rss']):
            raise ValueError("must be one of enum values ('json', 'csv', 'rss')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GeneralSearchRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cache_config
        if self.cache_config:
            _dict['cache_config'] = self.cache_config.to_dict()
        # set to None if time_range (nullable) is None
        # and model_fields_set contains the field
        if self.time_range is None and "time_range" in self.model_fields_set:
            _dict['time_range'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GeneralSearchRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "q": obj.get("q"),
            "language": obj.get("language") if obj.get("language") is not None else 'en',
            "page": obj.get("page") if obj.get("page") is not None else 1,
            "time_range": obj.get("time_range"),
            "format": obj.get("format") if obj.get("format") is not None else 'json',
            "cache_config": CacheConfig.from_dict(obj["cache_config"]) if obj.get("cache_config") is not None else None,
            "engines": obj.get("engines")
        })
        return _obj


